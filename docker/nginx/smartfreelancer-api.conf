server {
  listen 80;
  listen [::]:80;
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  ssl_certificate /etc/ssl/certs/smartfreelancer.pem;
  ssl_certificate_key /etc/ssl/private/smartfreelancer.key;

  server_name api.smartfreelancer.io;

  access_log /var/log/nginx/api-access.log;
  error_log /var/log/nginx/api-error.log;

  root /home/smartfreelancer-api/public/public;

  location / {
      # try to serve file directly, fallback to index.php
    try_files $uri /index.php$is_args$args;
  }

  # optionally disable falling back to PHP script for the asset directories;
  # nginx will return a 404 error when files are not found instead of passing the
  # request to Symfony (improves performance but Symfony's 404 page is not displayed)
  # location /bundles {
  #     try_files $uri =404;
  # }

  location ~ ^/index\.php(/|$) {
    fastcgi_pass unix:/run/php/php8.1-fpm.sock;
    fastcgi_split_path_info ^(.+\.php)(/.*)$;
    include fastcgi_params;

    # optionally set the value of the environment variables used in the application
    # fastcgi_param APP_ENV prod;
    # fastcgi_param APP_SECRET <app-secret-id>;
    # fastcgi_param DATABASE_URL "mysql://db_user:db_pass@host:3306/db_name";

    # When you are using symlinks to link the document root to the
    # current version of your application, you should pass the real
    # application path instead of the path to the symlink to PHP
    # FPM.
    # Otherwise, PHP's OPcache may not properly detect changes to
    # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
    # for more information).
    # Caveat: When PHP-FPM is hosted on a different machine from nginx
    #         $realpath_root may not resolve as you expect! In this case try using
    #         $document_root instead.
    fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
    fastcgi_param DOCUMENT_ROOT $realpath_root;
    # Prevents URIs that include the front controller. This will 404:
    # http://domain.tld/index.php/some-path
    # Remove the internal directive to allow URIs like this
    internal;

    if ($request_method = 'OPTIONS') {
      more_set_headers 'Access-Control-Allow-Origin: $http_origin';
      more_set_headers 'Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE, HEAD';
      more_set_headers 'Access-Control-Max-Age: 1728000';
      more_set_headers 'Access-Control-Allow-Credentials: true';
      more_set_headers 'Access-Control-Allow-Headers: Origin,Content-Type,Accept,Authorization';
      more_set_headers 'Content-Type: text/plain; charset=UTF-8';
      more_set_headers 'Content-Length: 0';
      return 204;
    }
  }

  # return 404 for all other php files not matching the front controller
  # this prevents access to other php files you don't want to be accessible.
  location ~ \.php$ {
    return 404;
  }

  if (-f $request_filename) {
    break;
  }
}
