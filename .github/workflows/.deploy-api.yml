name: Deploy to VPS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker environment
        uses: docker/setup-buildx-action@v1

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ secrets.GITHUB_REPOSITORY }}/smartfreelancer:$GITHUB_SHA -f Dockerfile.api .

      - name: Push Docker image to registry
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/${{ secrets.GITHUB_REPOSITORY }}/smartfreelancer:$GITHUB_SHA

      - name: SSH into VPS and deploy container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP_ADDRESS }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            docker pull ghcr.io/${{ secrets.GITHUB_REPOSITORY }}/smartfreelancer:$GITHUB_SHA
            docker stop smartfreelancer-$GITHUB_SHA || true
            docker rm smartfreelancer-$GITHUB_SHA || true
            docker run -d --name smartfreelancer-$GITHUB_SHA \
              -e DATABASE_HOST=$DATABASE_HOST \
              -e DATABASE_PORT=$DATABASE_PORT \
              -e RABBITMQ_HOST=$RABBITMQ_HOST \
              -p $(shuf -i 12000-12999 -n 1):80 \
              ghcr.io/${{ secrets.GITHUB_REPOSITORY }}/smartfreelancer:$GITHUB_SHA
            port=$(docker inspect -f '{{range $p, $conf := .NetworkSettings.Ports}} {{$p}} -> {{(index $conf 0).HostPort}} {{end}}' smartfreelancer-$GITHUB_SHA | grep ' 80/tcp' | awk '{print $3}')
            python3 -c "import fileinput, re; [print(re.sub(r'proxy_pass http://localhost:\d+;', f'proxy_pass http://localhost:{port};', line.rstrip())) if 'proxy_pass http://localhost:' in line else print(line.rstrip()) for line in fileinput.input('/etc/nginx/sites-available/default', inplace=True)]"
            nginx -s reload
            docker stop $(docker ps -q --filter "name=smartfreelancer" --filter "not name=smartfreelancer-$GITHUB_SHA")
            docker rm $(docker ps -aq --filter "name=smartfreelancer" --filter "not name=smartfreelancer-$GITHUB_SHA")
            docker images ghcr.io/${{ secrets.GITHUB_REPOSITORY }}/smartfreelancer --format '{{.Repository}}:{{.Tag}}' | grep -v "$GITHUB_SHA" | xargs docker image rm --force || true
